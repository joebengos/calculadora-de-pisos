{"version":3,"sources":["assets/logo.svg","assets/box.svg","assets/tape-measure.svg","components/Header/index.js","pages/Options/index.js","pages/FormLeft/index.js","pages/FormRight/index.js","pages/Result/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","to","src","Logo","alt","Options","Box","TapeMeasure","FormLeft","useState","Warea","setWarea","Harea","setHarea","history","useHistory","type","value","onChange","event","target","replace","onClick","length","alert","largura","parseFloat","comprimento","total","console","log","push","pathname","state","totalQuadrado","totalCaixas","totalObra","FormRight","area","setArea","Wpiso","setWPiso","Hpiso","setHpiso","pisoCx","setPisoCx","valoCx","setValorCx","INTL","Intl","NumberFormat","style","currency","CMQuadradoDaCaixa","parseInt","Math","round","format","Result","location","useLocation","result","setResult","useEffect","goBack","App","exact","path","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.05a4b7b3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.574dd35b.svg\";","module.exports = __webpack_public_path__ + \"static/media/box.991518aa.svg\";","module.exports = __webpack_public_path__ + \"static/media/tape-measure.29b6bd64.svg\";","import React from 'react'\nimport './style.css';\nimport Logo from '../../assets/logo.svg'\nimport { Link } from 'react-router-dom';\n\nexport const Header = () => (\n    <header>\n        <div className=\"container\">\n           <Link to=\"/\"> <img src={Logo} alt=\"Octopus Tools\"/> </Link>\n        </div>\n    </header>\n);","import React from \"react\";\nimport \"./style.css\";\nimport { Header } from \"../../components/Header\";\nimport Box from \"../../assets/box.svg\";\nimport TapeMeasure from \"../../assets/tape-measure.svg\";\nimport { Link } from \"react-router-dom\";\nexport const Options = () => {\n\n  return (\n    <>\n    <Header />\n    <div className=\"container\">\n      <div className=\"row justify-content-center\">\n        <div className=\"col-md-8 col-sm-12\">\n          <h1 className=\"page-title\">Calculadora de piso online</h1>\n          <div className=\"row justify-content-between\">\n            <Link className=\"option-button\" to=\"/use-box\">\n              <img src={Box} alt=\"--\" />\n              <label>Calcular por caixa</label>\n            </Link>\n            <div className=\"separator\" />\n            <Link className=\"option-button\" to=\"/use-messure\">\n              <img src={TapeMeasure} alt=\"--\" />\n              <label>Calcular por m²</label>\n            </Link>\n          </div>\n        </div>\n      </div>\n    </div>\n    </>\n  );\n};\n","import React, { useState } from \"react\";\nimport \"./style.css\";\nimport { Header } from \"../../components/Header\";\nimport { useHistory } from \"react-router-dom\";\n\nexport const FormLeft = () => {\n  const [Warea, setWarea] = useState(\"\"); // Area em m quadrados\n  const [Harea, setHarea] = useState(\"\"); // largura de um piso\n  let history = useHistory();\n\n  const handleCalc = () => {\n    if (Warea.length === 0 || Harea.length === 0)\n      alert(\"Preencha todos os campos!\");\n    const largura = parseFloat(Warea.replace(/,/g, \".\"));\n    const comprimento = parseFloat(Harea.replace(/,/g, \".\"));\n    const total = largura * comprimento;\n\n    console.log(\n      `Largura: ${largura} --- ${Warea}`,\n      `comprimento: ${comprimento}`,\n      total\n    );\n\n    history.push({\n      pathname: \"/result\",\n      state: { totalQuadrado: total, totalCaixas: null, totalObra: null },\n    });\n  };\n\n  return (\n    <>\n      <Header />\n      <div className=\"container\">\n        <div className=\"row justify-content-center\">\n          <div className=\"col-md-8 col-sm-12\">\n            <h1 className=\"page-title\">Calculadora de piso online</h1>\n            <div className=\"row justify-content-between\">\n              <form className=\"form-left\">\n                <div className=\"input-group\">\n                  <label>Largura do ambiente em metros</label>\n                  <input\n                    type=\"text\"\n                    value={Warea}\n                    onChange={(event) => {\n                      setWarea(event.target.value.replace(/[a-z A-Z]/g, \"\"));\n                    }}\n                  />\n                </div>\n                <div className=\"input-group\">\n                  <label>Comprimento do ambiente em metros</label>\n                  <input\n                    type=\"text\"\n                    value={Harea}\n                    onChange={(event) => {\n                      setHarea(event.target.value.replace(/[a-z A-Z]/g, \"\"));\n                    }}\n                  />\n                </div>\n              </form>\n              <div className=\"colum-text\">\n                <h4>Calculo por metro quadrado</h4>\n                <p>\n                  Pode ser muito chato ter que calcular algumas coisas na mão ou\n                  de cabeça\n                </p>\n              </div>\n            </div>\n            <div className=\"row justify-content-center\">\n              <button\n                type=\"button\"\n                className=\"btn btn-info\"\n                onClick={handleCalc}\n              >\n                Calcular\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import React, {useState} from \"react\";\nimport \"./style.css\";\nimport {useHistory} from \"react-router-dom\";\nimport { Header } from \"../../components/Header\";\nexport const FormRight = () => {\n\n  const [area, setArea] = useState(0); // Area em m quadrados\n  const [Wpiso, setWPiso] = useState(0); // largura de um piso\n  const [Hpiso, setHpiso] = useState(0); // altura de um piso\n  const [pisoCx, setPisoCx] = useState(0); // Quantidade de piso / caixa\n  const [valoCx, setValorCx] = useState(0); // valor de uma caixa\n  const INTL = Intl.NumberFormat('pt-BR', { style: 'currency', currency: 'BRL' })\n  let history = useHistory();\n\n  /*\n   * Total de caixas\n   * total em m quadrados\n   * valor \n  */\n\n  const calcCaixas = () => {\n    let  CMQuadradoPiso = (parseFloat(Wpiso) * parseFloat(Hpiso));\n    let CMQuadradoDaCaixa =  CMQuadradoPiso * parseInt(pisoCx);\n    let totalCaixas = Math.round(parseFloat(area) / (CMQuadradoDaCaixa / 10000));\n    let totalObra = INTL.format(totalCaixas * parseFloat(valoCx));\n\n\n    history.push({\n      pathname: \"/result\",\n      state: { totalQuadrado: area, totalCaixas, totalObra },\n    });\n     \n  }\n\n  return (\n    <>\n      <Header />\n      <div className=\"container\">\n        <div className=\"row justify-content-center\">\n          <div className=\"col-md-8 col-sm-12\">\n            <h1 className=\"page-title\">Calculadora de piso online</h1>\n            <div className=\"row justify-content-between\">\n              <form className=\"form-full\">\n                <div className=\"form-column\">\n                  <div className=\"input-group\">\n                    <label>Total em metros quadrados da área</label>\n                    <input type=\"text\" value={area} onChange={(event) => {setArea(event.target.value.replace(/[a-z A-Z]/g,''))}} />\n                  </div>\n                  <div className=\"input-group\">\n                    <label>Largura do piso em CM</label>\n                    <input type=\"text\" value={Wpiso} onChange={(event) => {setWPiso(event.target.value.replace(/[a-z A-Z]/g,''))}} />\n                  </div>\n                  <div className=\"input-group\">\n                    <label>Altura do piso em CM</label>\n                    <input type=\"text\" value={Hpiso} onChange={(event) => {setHpiso(event.target.value.replace(/[a-z A-Z]/g,''))}} />\n                  </div>\n                </div>\n                <div className=\"form-column\">\n                  <div className=\"input-group\">\n                    <label>Quantidade de pisos por caixa</label>\n                    <input type=\"text\" value={pisoCx} onChange={(event) => {setPisoCx(event.target.value.replace(/[a-z A-Z]/g,''))}} />\n                  </div>\n                  <div className=\"input-group\">\n                    <label>Valor de 1 caixa</label>\n                    <input type=\"text\" value={valoCx} onChange={(event) => {setValorCx(event.target.value.replace(/[a-z A-Z]/g,''))}} />\n                  </div>\n                </div>\n              </form>\n            </div>\n            <div className=\"row justify-content-center\">\n              <button type=\"button\" className=\"btn btn-info\" onClick={calcCaixas}>\n                Calcular\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport \"./style.css\";\nimport { useLocation, useHistory, Link } from \"react-router-dom\";\nimport { Header } from \"../../components/Header\";\n\nexport const Result = () => {\n  const location = useLocation();\n  const [result, setResult] = useState();\n  let history = useHistory();\n\n  const renderResult = () => {\n    if (!result) return null;\n\n    return (\n      <>\n        {result.totalCaixas && (\n          <div className=\"row\">\n            <h5>Total de caixas:</h5>\n            <h1>{result.totalCaixas} cx</h1>\n          </div>\n        )}\n        {result.totalQuadrado && (\n          <div className=\"row\">\n            <h5>Total de pisos em metros quadrado:</h5>\n            <h2>{result.totalQuadrado}m²</h2>\n          </div>\n        )}\n        {result.totalObra && (\n          <div className=\"row\">\n            <h5>Valor da obra:</h5>\n            <h1>{result.totalObra}</h1>\n          </div>\n        )}\n      </>\n    );\n  };\n\n  useEffect(() => {\n    //  console.log(location.pathname); // result: '/secondpage'\n    //  console.log(location.search); // result: '?query=abc'\n    //  console.log(location.state); // result: 'some_value'\n\n    setResult(location.state);\n  }, [location.state, result]);\n\n  return (\n    <>\n      <Header />\n      <div className=\"container\">\n        <div className=\"row justify-content-center\">\n          <div className=\"col-md-8 col-sm-12\">\n            <h1 className=\"page-title\">Calculadora de piso online</h1>\n            <div className=\"row justify-content-between\">\n              <form className=\"form-full\">\n                <div className=\"form-column\">{renderResult()}</div>\n                <div className=\"form-column\">\n                  <h4>Sobre o resultado</h4>\n                  <p>Calculamos a quantidade de piso/caixas necessária com basia nas informações coletadas\n                    arredondando os valores para cima. \n                    \n                    Por tanto, não tome o valores resultantes como verdade absoluta. \n                    Considere apenas uma estimativa de gastos e material.\n                  </p>\n                  <p> \n                    A melhor pessoa para te ajudar nesse momento é o seu pedreiro/empreiteira. Entre em contato\n                    com eles para melhores resultados\n                  </p>\n                  <p> Se o seu calculo retornou algum valor errado ou algum erro, por favor entrem em contato clicando <Link to='/contato'>aqui</Link></p> \n                  \n                </div>\n              </form>\n            </div>\n            <div className=\"row justify-content-center\">\n              <button type=\"button\" className=\"btn btn-info\" onClick={() => history.goBack()}>\n                Recalcular\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport { Options } from \"./pages/Options\";\nimport { FormLeft } from \"./pages/FormLeft\";\nimport { FormRight } from \"./pages/FormRight\";\nimport { Result } from \"./pages/Result\";\n\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\">\n          <Options />\n        </Route>\n        <Route path=\"/use-box\">\n          <FormRight />\n        </Route>\n        <Route path=\"/use-messure\">\n          <FormLeft />\n        </Route>\n        <Route path=\"/result\">\n          <Result />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './globalStyle.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}